version: "3.5"

x-environment:
  &default-back-environment
  POSTGRES_DB: "taiga"
  POSTGRES_HOST: "infra_taiga-db"
  CSRF_TRUSTED_ORIGINS: "['http://taiga.${INFRA_DOMAIN}']"

x-volumes:
  &default-back-volumes
  # These volumens will be used by taiga-back and taiga-async.
  - taiga-static-data:/taiga-back/static
  - taiga-media-data:/taiga-back/media
  # - ./config.py:/taiga-back/settings/config.py

services:
  taiga-db:
    image: postgres:12.3
    env_file:
      - ${INFRA_DIR}/config/taiga.env
    environment: *default-back-environment
    volumes:
      - taiga-db-data:/var/lib/postgresql/data
    networks:
      - infra_network

  taiga-back:
    image: taigaio/taiga-back:latest
    env_file:
      - ${INFRA_DIR}/config/taiga.env
    environment: *default-back-environment
    volumes: *default-back-volumes
    networks:
      - infra_network

  taiga-async:
    image: taigaio/taiga-back:latest
    env_file:
      - ${INFRA_DIR}/config/taiga.env
    entrypoint: ["/taiga-back/docker/async_entrypoint.sh"]
    environment: *default-back-environment
    volumes: *default-back-volumes
    networks:
      - infra_network

  taiga-async-rabbitmq:
    image: rabbitmq:3.8-management-alpine
    env_file:
      - ${INFRA_DIR}/config/taiga.env
    hostname: "taiga-async-rabbitmq"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 2s
      timeout: 15s
      retries: 5
      start_period: 3s
    volumes:
      - taiga-async-rabbitmq-data:/var/lib/rabbitmq
    networks:
      - infra_network

  taiga-front:
    image: taigaio/taiga-front:latest
    env_file:
      - ${INFRA_DIR}/config/taiga.env
    networks:
      - infra_network
    # volumes:
    #   - ./conf.json:/usr/share/nginx/html/conf.json

  taiga-events:
    image: taigaio/taiga-events:latest
    env_file:
      - ${INFRA_DIR}/config/taiga.env
    networks:
      - infra_network

  taiga-events-rabbitmq:
    image: rabbitmq:3.8-management-alpine
    env_file:
      - ${INFRA_DIR}/config/taiga.env
    hostname: "taiga-events-rabbitmq"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 2s
      timeout: 15s
      retries: 5
      start_period: 3s
    volumes:
      - taiga-events-rabbitmq-data:/var/lib/rabbitmq
    networks:
      - infra_network

  taiga-protected:
    image: taigaio/taiga-protected:latest
    env_file:
      - ${INFRA_DIR}/config/taiga.env
    networks:
      - infra_network

  taiga-gateway:
    image: nginx:1.19-alpine
    env_file:
      - ${INFRA_DIR}/config/taiga.env
    volumes:
      - taiga-static-data:/taiga/static
      - taiga-media-data:/taiga/media
      - ${INFRA_DIR}/config/taiga.conf:/etc/nginx/conf.d/default.conf
    networks:
      - infra_network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.platform.os == linux
          # Since we need the 22 port and traefik doesn't support non HTTP traffic we set the gitlab on the role
          - node.role == manager
      labels:
        traefik.enable: "true"
        traefik.port: 80
        traefik.frontend.rule: "Host:taiga.${INFRA_DOMAIN}"
        traefik.frontend.passHostHeader: "true"

volumes:
  taiga-static-data:
    driver: local
    driver_opts:
      type: nfs4
      o: "addr=${INFRA_FS_SERVER}"
      device: ":/${INFRA_FS_ROOT}/taiga/static"
  taiga-media-data:
    driver: local
    driver_opts:
      type: nfs4
      o: "addr=${INFRA_FS_SERVER}"
      device: ":/${INFRA_FS_ROOT}/taiga/media"
  taiga-db-data:
    driver: local
    driver_opts:
      type: nfs4
      o: "addr=${INFRA_FS_SERVER}"
      device: ":/${INFRA_FS_ROOT}/taiga/db"
  taiga-async-rabbitmq-data:
    driver: local
    driver_opts:
      type: nfs4
      o: "addr=${INFRA_FS_SERVER}"
      device: ":/${INFRA_FS_ROOT}/taiga/rabbitmq-async"
  taiga-events-rabbitmq-data:
    driver: local
    driver_opts:
      type: nfs4
      o: "addr=${INFRA_FS_SERVER}"
      device: ":/${INFRA_FS_ROOT}/taiga/rabbitmq-events"
